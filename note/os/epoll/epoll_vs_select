

select ---> O(n)

  1 : support max fd : 1024
  2 : copy fd from userspace to kernel space
  3 : poll every fd of set.
  4 : level trigger.


epoll ----> O(1)

  1 : support more fd than select.
  2 : more effective : event notification. don't need to poll every fd 
  3 : support level trigger and edge trigger.



==========================================================

while(1) {

  FD_ZERO(&rdfds);

  FD_SET(0, &rdfds);
  FD_SET(sock, &rdfds);

  tv.tv_sec = 0;
  tv.tv_usec = 1;

  res = select(maxfd + 1, &rdfds, NULL, NULL, &tv);
  if (res > 0) 
  {
    for (i = 0; i <= maxfd; i++) 
    { 
        if (i == 0 && FD_ISSET(0, &rdfds)) 
        {
          process_0();
        } 
        else if (FD_ISSET(i, &rdfds) 
        {
          process_socket(i);
        }
    }
  } 
  else if (res == 0) 
  {
    process_timeout();
  } 
  else 
  {
    process_select_error();
  }
}


==========================================================


           #define MAX_EVENTS 10

           struct epoll_event ev;
           struct epoll_event events[MAX_EVENTS];
           int listen_sock, conn_sock, nfds, epollfd;

           epollfd = epoll_create1(0);

           ev.events = EPOLLIN;
           ev.data.fd = listen_sock;
           epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev);

           while(1) 
           {
               nfds = epoll_wait(epollfd, events, MAX_EVENTS, -1);
               if (nfds == -1) 
               {
                   exit(-1);
               } 
               else if (nfds == 0) 
               {
                  process_timeout();
               } 
               else 
               {

                  for (n = 0; n < nfds; ++n) 
                  {
                      if (events[n].data.fd == listen_sock) 
                      {
                          conn_sock = accept(listen_sock,(struct sockaddr *) &local, &addrlen);

                          setnonblocking(conn_sock);
                          ev.events = EPOLLIN | EPOLLET;
                          ev.data.fd = conn_sock;
                          epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock, &ev);

                      } 
                      else 
                      {
                          do_use_fd(events[n].data.fd);
                      }
                  } // for
               }
           }


========================================================================================



