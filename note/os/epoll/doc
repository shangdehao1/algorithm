


The epoll API performs a similar task to poll(2): monitoring multiple file descriptors to see if I/O is possible on any of them.  The epoll API can be used either as an edge-
triggered or a level-triggered interface and scales well to large numbers of watched file descriptors.  The following system calls are provided to create and manage an  epoll
instance:

 *  epoll_create(2)  creates  an  epoll  instance  and  returns  a  file descriptor referring to that instance.  (The more recent epoll_create1(2) extends the functionality of
    epoll_create(2).)

 *  Interest in particular file descriptors is then registered via epoll_ctl(2).  The set of file descriptors currently registered on an epoll instance is sometimes called  an
    epoll set.

 *  epoll_wait(2) waits for I/O events, blocking the calling thread if no events are currently available.

Level-triggered and edge-triggered

    The  epoll event distribution interface is able to behave both as edge-triggered (ET) and as level-triggered (LT).  The difference between the two mechanisms can be described
    as follows.  Suppose that this scenario happens:

    1. The file descriptor that represents the read side of a pipe (rfd) is registered on the epoll instance.

    2. A pipe writer writes 2 kB of data on the write side of the pipe.

    3. A call to epoll_wait(2) is done that will return rfd as a ready file descriptor.

    4. The pipe reader reads 1 kB of data from rfd.

    5. A call to epoll_wait(2) is done.

If the rfd file descriptor has been added to the epoll interface using the EPOLLET (edge-triggered) flag, the call to epoll_wait(2) done in step 5 will probably hang  despite
the  available data still present in the file input buffer; meanwhile the remote peer might be expecting a response based on the data it already sent.  The reason for this is
that edge-triggered mode delivers events only when changes occur on the monitored file descriptor.  So, in step 5 the caller might end  up  waiting  for  some  data  that  is
already  present  inside  the input buffer.  In the above example, an event on rfd will be generated because of the write done in 2 and the event is consumed in 3.  Since the
read operation done in 4 does not consume the whole buffer data, the call to epoll_wait(2) done in step 5 might block indefinitely.

An application that employs the EPOLLET flag should use nonblocking file descriptors to avoid having a blocking read or write starve a task that  is  handling  multiple  file
descriptors.  The suggested way to use epoll as an edge-triggered (EPOLLET) interface is as follows:

     i   with nonblocking file descriptors; and

     ii  by waiting for an event only after read(2) or write(2) return EAGAIN.

By  contrast,  when used as a level-triggered interface (the default, when EPOLLET is not specified), epoll is simply a faster poll(2), and can be used wherever the latter is
used since it shares the same semantics.

Since even with edge-triggered epoll, multiple events can be generated upon receipt of multiple chunks of data, the caller has the option to specify the EPOLLONESHOT flag, to
tell  epoll to disable the associated file descriptor after the receipt of an event with epoll_wait(2).  When the EPOLLONESHOT flag is specified, it is the caller's responsi‐
bility to rearm the file descriptor using epoll_ctl(2) with EPOLL_CTL_MOD.

           #define MAX_EVENTS 10
           struct epoll_event ev, events[MAX_EVENTS];
           int listen_sock, conn_sock, nfds, epollfd;

           /* Code to set up listening socket, 'listen_sock',
              (socket(), bind(), listen()) omitted */

           epollfd = epoll_create1(0);
           if (epollfd == -1) {
               perror("epoll_create1");
               exit(EXIT_FAILURE);
           }

           ev.events = EPOLLIN;
           ev.data.fd = listen_sock;
           if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev) == -1) {
               perror("epoll_ctl: listen_sock");
               exit(EXIT_FAILURE);
           }

           for (;;) {
               nfds = epoll_wait(epollfd, events, MAX_EVENTS, -1);
               if (nfds == -1) {
                   perror("epoll_wait");
                   exit(EXIT_FAILURE);
               }

               for (n = 0; n < nfds; ++n) {
                   if (events[n].data.fd == listen_sock) {
                       conn_sock = accept(listen_sock, (struct sockaddr *) &local, &addrlen);
                       if (conn_sock == -1) {
                           perror("accept");
                           exit(EXIT_FAILURE);
                       }
                       setnonblocking(conn_sock);
                       ev.events = EPOLLIN | EPOLLET;
                       ev.data.fd = conn_sock;
                       if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,
                                   &ev) == -1) {
                           perror("epoll_ctl: conn_sock");
                           exit(EXIT_FAILURE);
                       }
                   } else {
                       do_use_fd(events[n].data.fd);
                   }
               }
           }



       Q1  What happens if you register the same file descriptor on an epoll instance twice?

       A1  You will probably get EEXIST.  However, it is possible to add a duplicate (dup(2), dup2(2), fcntl(2) F_DUPFD) descriptor to the same epoll instance.  This can be a useful
           technique for filtering events, if the duplicate file descriptors are registered with different events masks.

       Q2  Can two epoll instances wait for the same file descriptor?  If so, are events reported to both epoll file descriptors?

       A2  Yes, and events would be reported to both.  However, careful programming may be needed to do this correctly.

       Q3  Is the epoll file descriptor itself poll/epoll/selectable?

       A3  Yes.  If an epoll file descriptor has events waiting, then it will indicate as being readable.

       Q4  What happens if one attempts to put an epoll file descriptor into its own file descriptor set?

       A4  The epoll_ctl(2) call will fail (EINVAL).  However, you can add an epoll file descriptor inside another epoll file descriptor set.

       Q5  Can I send an epoll file descriptor over a UNIX domain socket to another process?

       A5  Yes, but it does not make sense to do this, since the receiving process would not have copies of the file descriptors in the epoll set.

       Q6  Will closing a file descriptor cause it to be removed from all epoll sets automatically?

       A6  Yes,  but  be  aware of the following point.  A file descriptor is a reference to an open file description (see open(2)).  Whenever a descriptor is duplicated via dup(2),
           dup2(2), fcntl(2) F_DUPFD, or fork(2), a new file descriptor referring to the same open file description is created.  An open file description continues  to  exist  until
           all  file  descriptors  referring  to it have been closed.  A file descriptor is removed from an epoll set only after all the file descriptors referring to the underlying
           open file description have been closed (or before if the descriptor is explicitly removed using epoll_ctl(2) EPOLL_CTL_DEL).  This means that even after a file descriptor
           that  is part of an epoll set has been closed, events may be reported for that file descriptor if other file descriptors referring to the same underlying file description
           remain open.

       Q7  If more than one event occurs between epoll_wait(2) calls, are they combined or reported separately?

       A7  They will be combined.

       Q8  Does an operation on a file descriptor affect the already collected but not yet reported events?

       A8  You can do two operations on an existing file descriptor.  Remove would be meaningless for this case.  Modify will reread available I/O.

       Q9  Do I need to continuously read/write a file descriptor until EAGAIN when using the EPOLLET flag (edge-triggered behavior) ?

       A9  Receiving an event from epoll_wait(2) should suggest to you that such file descriptor is ready for the requested I/O operation.  You must consider it ready until the next
           (nonblocking) read/write yields EAGAIN.  When and how you will use the file descriptor is entirely up to you.

           For  packet/token-oriented  files  (e.g.,  datagram  socket,  terminal  in  canonical  mode), the only way to detect the end of the read/write I/O space is to continue to
           read/write until EAGAIN.

           For stream-oriented files (e.g., pipe, FIFO, stream socket), the condition that the read/write I/O space is exhausted can also be detected by checking the amount of  data
           read  from  /  written  to  the target file descriptor.  For example, if you call read(2) by asking to read a certain amount of data and read(2) returns a lower number of
           bytes, you can be sure of having exhausted the read I/O space for the file descriptor.  The same is true when writing using write(2).  (Avoid this latter technique if you
           cannot guarantee that the monitored file descriptor always refers to a stream-oriented file.)



















水平触发(level-trggered)
  只要文件描述符关联的读内核缓冲区非空，有数据可以读取，就一直发出可读信号进行通知，
  当文件描述符关联的内核写缓冲区不满，有空间可以写入，就一直发出可写信号进行通知
  LT模式支持阻塞和非阻塞两种方式。epoll默认的模式是LT。

边缘触发(edge-triggered)
  当文件描述符关联的读内核缓冲区由空转化为非空的时候，则发出可读信号进行通知，
  当文件描述符关联的内核写缓冲区由满转化为不满的时候，则发出可写信号进行通知


两者的区别在哪里呢？水平触发是只要读缓冲区有数据，就会一直触发可读信号，而边缘触发仅仅在空变为非空的时候通知一次，
LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.
在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。
如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的select/poll都是这种模型的代表．

// LT
ret = read(fd, buf, sizeof(buf));

// ET
while(true) {
    ret = read(fd, buf, sizeof(buf);
    if (ret == EAGAIN) break;
}


int epoll_create(int size)
  - the size argument is ignored, but must be greater than zero. 
    In the initial epoll_create() implementation, the size argument informed the kernel of the number of file descriptors that the caller expected to add to the epoll instance.  
      The kernel used this information as a hint for the amount of space to initially allocate in internal data structures describing events.

  - epoll_create() returns a file descriptor referring to the new epoll instance.  This file descriptor is used for all the subsequent calls to the epoll interface.  
      When no longer required, the file descriptor returned by epoll_create() should be closed by using close(2). 
      When all file descriptors referring to an epoll instance have been closed, the kernel destroys the instance and releases the associated resources for reuse.

epoll_ctl


epoll_wait





















EAGAIN

这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。
例如，以O_NONBLOCK的标志打开文件/socket/FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，
read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。







